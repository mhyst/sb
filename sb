#!/bin/bash

function docurl {
	local urlfrom="$1"
	local filename="$2"

	curl "$urlfrom" > "$filename"
	FILESIZE=$(stat -c%s "$filename")
	while [[ $FILESIZE == 0 ]]; do
		echo "La descarga ha fallado."
		echo "Esperando 5 segundos antes de volver a intentarlo..."
		sleep 5
		curl "$urlfrom" > "$filename"
		FILESIZE=$(stat -c%s "$filename")
	done	
}

function userChoice() {

	local limite=$1
	local reply
	let reply=0

	echo > /dev/tty
	echo "Introduzca el número del archivo que quiere ver:" > /dev/tty
	read reply < /dev/tty
	echo > /dev/tty

	#We see if the user entered a number such as we need
	while [[ "$reply" -lt 0 ]] || [[ "$reply" -gt  $limite ]]; do

		#We give advice to the user and exit
		echo "Tiene que introducir un número de entre los indicados:" > /dev/tty
		read reply < /dev/tty
		echo "Reply es: $reply" > /dev/tty

	done

	echo $reply
}

function getSerie() {
	local chain=$1

	IFS='/' read -r -a array <<< "$chain"

	local serie="${array[3]}"
	echo $serie
}

function parseLink() {
	local text=$1

	grep -Po 'href=".*?"' <<< $text | sed 's/\(href="\|"\)//g'
}

function parseService() {
	local text=$1

	#grep -Po '/servidores/".*?.jpg"' <<< $text | sed 's/\(/servidores//"\|.jpg"\)//g'
	grep -Po "src='/servidores/.*?'" <<< $text | sed "s/\(src='\/servidores\/\|'\)//g"
}

function searchSeries() {

	#echo "$@"
	local keys=$(echo $@ | tr " " "+")
	#echo "$keys"

	curl "https://seriesblanco.com/search.php?q1=$keys" > /tmp/paso0.txt 2> /tmp/paso0.dbg

	egrep -E -o  "href='/serie/[0-9]{4}/.*?.html'" /tmp/paso0.txt | sed "s/\(href='\|'\)//g"
}

function loadChapters() {
	local url=$1
	local serie=$2

	curl "https://seriesblanco.com/$url" > /tmp/paso1.txt 2> /tmp/paso1.dbg
	
	egrep -E -o  "/serie/[0-9]{1,6}/temporada-[0-9]{1,3}+/capitulo-[0-9]{1,4}/.*?.html" /tmp/paso1.txt | grep "$serie" > /tmp/paso1.2.txt

	if [[ $temporada > 0 ]]; then
		grep "temporada-$temporada" /tmp/paso1.2.txt > /tmp/paso1.3.txt
		rm /tmp/paso1.2.txt
		mv /tmp/paso1.3.txt /tmp/paso1.2.txt
	fi
	if [[ $capitulo > 0 ]]; then
		grep "capitulo-$capitulo" /tmp/paso1.2.txt > /tmp/paso1.3.txt
		rm /tmp/paso1.2.txt
		mv /tmp/paso1.3.txt /tmp/paso1.2.txt	
	fi
	cat /tmp/paso1.2.txt
}

function loadChapterLinks() {
	local url=$1

	curl "https://seriesblanco.com/$url" | tr -d '\n' > /tmp/paso2.txt 2> /tmp/paso2.dbg

	grep -Po '<a href="/enlace.*?" target="_blank">' /tmp/paso2.txt
	#grep -Po 'href=".*?"' /tmp/paso2.2.txt | sed 's/\(href="\|"\)//g'
}

function loadChapterLinks2() {
	local url=$1

	curl "https://seriesblanco.com/$url" | tr -d '\n' > /tmp/paso2.txt 2> /tmp/paso2.dbg

	#grep -Po '<a href="/enlace.*?" target="_blank">' /tmp/paso2.txt
	grep -Po '<a href=".*?" target="_blank">' /tmp/paso2.txt
}

function loadChapterServices() {
	local url=$1

	curl "https://seriesblanco.com/$url" | tr -d '\n' > /tmp/paso2.txt 2> /tmp/paso2.dbg

	grep -Po "src='/servidores.*?' width='80'" /tmp/paso2.txt
}

function getLink() {
	local enlace=$1

	IFS='/' read -r -a array <<< "$enlace"

	id="${array[1]}"
	serie="${array[2]}"

	id=${id:6}


	#serie=$1
	#id=$2

	#echo "Serie: $serie Id: $id"

	curl "https://seriesblanco.com/ajax/load_enlace.php?serie=$serie&id=$id" > /tmp/paso3.txt 2> /tmp/paso2.dbg

	#Se debería comprobar si el resultado es vacío. 
	#La instrucción para saber la longitud del archivo es estaÇ:
	#FILESIZE=$(stat -c%s "$filename")

	grep -Po "window.location.href= '.*?'" /tmp/paso3.txt | sed "s/\(window.location.href= '\|'\)//g"
}

###############################################################################
# feature1: BEGIN
###############################################################################

#Current version
VERSION="0.0.1"

trim() {
	local FOO="$1"
	FOO_NO_EXTERNAL_SPACE="$(echo -e "${FOO}" | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"
	echo "$FOO_NO_EXTERNAL_SPACE"
}

function help {
	echo "sb $VERSION - Copyleft (GPL v3) Julio Serrano 2017"
	echo "sb webscrapper"
	echo
	echo "Modo de empleo: svr [opción] <cadena de búsqueda>"
	echo
	echo " Ejemplos:"
	echo 	sb discovery
	echo
	echo	sb -t 9 se ha escrito un crimen
	echo
	echo	sb -t 1 -c 7 el mentalista
	echo
	echo	sb -t 2 -c 2 -s streamcloud the orville
	echo
	echo "Opciones"
	echo " -t"
	echo "      Filtrar por temporada."
	echo
	echo " -c"
	echo "      Filtrar por capítulo."
	echo
	echo " -s"
	echo "      Filtrar por servicio."
	echo
}

TEMP=`getopt -o t:c:s: --long "temporada:,capitulo:,servicio:" -- "$@"`



if [ $? != 0 ]; then help; exit 1; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"


# Debug
echo "$TEMP"

# VER_NO_VISTOS=false
# VER_VISTOS=false
# forth_number=0
# forth_all=false
# reset=false
# reset_by=false
# back=0
# reset_data=()
temporada=0
capitulo=0
servicio=""

while true; do
  case "$1" in
  	-h | --help ) help; exit ;;
	-t | --temporada ) temporada=$2; shift ;;
	-c | --capitulo ) capitulo=$2; shift ;;
	-s | --servicio ) servicio=$2; shift ;;
	# -b | --back ) let back++ ;;
	# -f | --forth ) let forth_number++ ;;
	# --forth-by ) forth_number=$2; shift ;;
	# -a | --forth-all ) forth_all=true ;;
	# -n ) VER_NO_VISTOS=true ;;
    # -v ) VER_VISTOS=true ;;
	# -r | --reset ) reset=true ;;
	# -m | --mreset ) reset_data+=("$2"); shift ;;
	# --reset-by ) reset_by=true; bydata=$2; shift ;;
    * ) break ;;
  esac
  shift
done

if [[ $1 = "--" ]]; then
	shift
fi

echo "Parámetros: $temporada $capitulo $servicio"
echo "Argumentos: $1 $2 $3 $4 $5 $6 $7 $8 $9"
# PARM=""
# for arg in $@; do
# 	if [[ $1 != "--" ]]; then
# 		PARM="$PARM$1 "
# 	fi
# 	shift
# done

#PARM=$(trim $PARM)

echo "sb $VERSION - Copyleft (GPL v3) Julio Serrano 2017"
echo "Webscrapper para facilitar ver series de sb"
echo
##############################################################################
# feature1: END
##############################################################################

#Recuperar los resultados de la búsqueda
SERIES=$(searchSeries $1 $2 $3 $4 $5 $6 $7 $8 $9)

if [[ $SERIES = "" ]]; then
	echo "No se ha encontrado ninguna serie"
	exit
fi

#Dividir series por nueva línea
readarray -t y <<<"$SERIES"

#Recorrer el array resultante "y"
let i=0
for t in "${y[@]}"; do
	echo "$i: $t"
	((i++))
done

LIMITE=$(( ${#y[*]} - 1 ))
CHOSENID=$(userChoice $LIMITE)

#echo "El elegido es: ${y[$CHOSENID]}"
echo

#Extraer el nombre de la serie para futuros usos
SERIE=$(getSerie "${y[$CHOSENID]}")

CHAPTERS=$(loadChapters ${y[$CHOSENID]} $SERIE)

unset y

if [[ $CHAPTERS = "" ]]; then
	echo "No se ha encontrado ningún episodio para esta serie"
	exit
fi

#Dividir series por nueva línea
readarray -t y <<<"$CHAPTERS"

#Recorrer el array resultante "y"
let i=0
for t in "${y[@]}"; do
	echo "$i: $t"
	((i++))
done

LIMITE=$(( ${#y[*]} - 1 ))
CHOSENID=$(userChoice $LIMITE)

echo
#echo ${y[$CHOSENID]}
#echo "El elegido es: ${y[$CHOSENID]}"

CHAPTERLINKS=$(loadChapterLinks "${y[$CHOSENID]}")
CHAPTERSERVICES=$(loadChapterServices "${y[$CHOSENID]}")


unset y

if [[ $CHAPTERLINKS = "" ]]; then
	CHAPTERLINKS=$(loadChapterLinks2 "$e")

	if [[ $CHAPTERLINKS = "" ]]; then
		echo "No se han encontrado enlaces para el episodio seleccionado"
		continue
	fi
fi

if [[ $CHAPTERSERVICES = "" ]]; then
	echo "No se han encontrado enlaces para el episodio seleccionado"
	exit
fi

#Dividir series por nueva línea
readarray -t y <<<"$CHAPTERLINKS"
readarray -t x <<<"$CHAPTERSERVICES"

if [[ "${#y[*]}" != "${#x[*]}" ]]; then
	echo "El número de enlaces no se corresponde con el número de servicios"
	echo "y contiene ${#y[*]} mientras que x contiene ${#x[*]}"	

	echo "Se intentará compensar"
	(( offset=${#y[*]}-${#x[*]} ))

	echo ">>> offset $offset"
	echo ">>> alinks size ${#y[@]}"
	declare -a newalinks
	let k=0
	for enaux in "${y[@]}"; do
		if [[ $offset > 0 ]]; then
			(( offset-- ))
			continue
		fi
		newalinks[k]="$enaux"
		(( k++ ))
	done

	alinks=("${newalinks[@]}")
	echo ">>> alinks size again ${#y[@]}"

	unset newalinks
	if [[ "${#y[*]}" != "${#x[*]}" ]]; then
		echo "El número de enlaces no se corresponde con el número de servicios"
		echo "y contiene ${#y[*]} mientras que x contiene ${#x[*]}"
		continue
	fi

fi

#Recorrer el array resultante "y"
let i=0
for t in "${y[@]}"; do
	mylink=$(parseLink "$t")
	myservice=$(parseService "${x[i]}")

	# En algunos casos, aparece directamente el enlace a los servicios de streaming
	# en lugar del /enlace/...
	# En esos casos le damos un uso distinto
	if [[ "${mylink:0:1}" != "/" ]]; then

		readarray -t firstlink <<< "$mylink"
		if [[ ${#firstlink[@]} > 1 ]]; then
			(( lastlineindex=${#firstlink[@]}-1 ))
			echo ">>> lastlineindex $lastlineindex"
			mylink="${firstlink[$lastlineindex]}"
			echo "<<<<< $mylink >>>>"
			y[$i]="$mylink"
		fi

		myservice="$mylink"

		if [[ ${myservice} == *{$servicio}* ]]; then
			echo "$j: $mylink"		
		fi
	else
		if [[ ${myservice,,} == ${servicio,,}* ]]; then
			echo "$i: $mylink / $myservice"
		fi
	fi
	((i++))
done

LIMITE=$(( ${#y[*]} - 1 ))
CHOSENID=$(userChoice $LIMITE)

#echo ${y[$CHOSENID]}
#echo "El elegido es: ${y[$CHOSENID]}"

LINK=$(getLink $(parseLink "${y[$CHOSENID]}"))

unset y

if [[ $LINK = "" ]]; then
	echo "Fallo al obtener el enlace"
	exit
fi

echo "El enlace es: $LINK"
firefox "$LINK"

#Dividir series por nueva línea
#readarray -t y <<<"$CHAPTER"

#Recorrer el array resultante "y"
# let i=0
# for t in "${y[@]}"; do
# 	echo "$i: $t"
# 	((i++))
# done

# LIMITE=$(( ${#y[*]} - 1 ))
# CHOSENID=$(userChoice $LIMITE)

# #echo ${y[$CHOSENID]}
# echo "El elegido es: ${y[$CHOSENID]}"