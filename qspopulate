#!/bin/bash
#################################################################################################
# V A R I A B L E S
#################################################################################################
FILTROAWK="/home/mhyst/bin/scripts/seriesblanco/filtro.awk"
SQLITE="sqlite3 /home/mhyst/bin/scripts/seriesblanco/sbdb"
#Current version
VERSION="0.0.1"
CODENAME="qspopulate"

#################################################################################################
# Funciones que no se utilizan
#################################################################################################
function docurl {
	local urlfrom="$1"
	local filename="$2"

	curl "$urlfrom" > "$filename"
	FILESIZE=$(stat -c%s "$filename")
	while [[ $FILESIZE == 0 ]]; do
		echo "La descarga ha fallado."
		echo "Esperando 5 segundos antes de volver a intentarlo..."
		sleep 5
		curl "$urlfrom" > "$filename"
		FILESIZE=$(stat -c%s "$filename")
	done	
}

#################################################################################################
# Funciones reutilizables
#################################################################################################

function userChoice() {

	local limite=$1
	local reply
	let reply=0

	echo > /dev/tty
	echo "Introduzca el número del archivo que quiere ver:" > /dev/tty
	read reply < /dev/tty
	echo > /dev/tty

	#We see if the user entered a number such as we need
	while [[ "$reply" -lt 0 ]] || [[ "$reply" -gt  $limite ]]; do

		#We give advice to the user and exit
		echo "Tiene que introducir un número de entre los indicados:" > /dev/tty
		read reply < /dev/tty
		echo "Reply es: $reply" > /dev/tty

	done

	echo $reply
}

#################################################################################################
# Funciones de extracción de datos con REGEXP
#################################################################################################

function getSerie() {
	local chain=$1

	IFS='/' read -r -a array <<< "$chain"

	local serie="${array[3]}"
	echo $serie
}

function parseLink() {
	local text=$1

	grep -Po 'href=".*?"' <<< $text | sed 's/\(href="\|"\)//g'
}

function parseService() {
	local text=$1

	grep -Po "src='/servidores/.*?'" <<< $text | sed "s/\(src='\/servidores\/\|'\)//g"
}

function parseTemporada() {
	local url=$1

	local t=`grep -Po "temporada-[0-9]{1,3}" <<< $url`

	echo ${t:10}
}

function parseCapitulo() {
	local url=$1

	local t=`grep -Po "capitulo-[0-9]{1,4}" <<< $url`

	echo ${t:9}
}

#################################################################################################
# Funciones de web scrapping
#################################################################################################

function searchSeries() {

	#echo "$@"
	local keys=$(echo $@ | tr " " "+")
	#echo "$keys"

	curl "https://seriesblanco.com/search.php?q1=$keys" > /tmp/paso0.txt 2> /tmp/paso0.dbg

	egrep -E -o  "href='/serie/[0-9]{1,4}/.*?.html'" /tmp/paso0.txt | sed "s/\(href='\|'\)//g"
}

function loadChapters() {
	local url=$1
	local serie=$2

	curl "https://seriesblanco.com/$url" > /tmp/paso1.txt 2> /tmp/paso1.dbg
	
	egrep -E -o  "/serie/[0-9]{1,6}/temporada-[0-9]{1,3}+/capitulo-[0-9]{1,4}/.*?.html" /tmp/paso1.txt | grep "$serie" > /tmp/paso1.2.txt

	#Si hay valores de temporada y capítulo introducidos por argumentos se filtra
	#a partir de esa temporada y ese capítulo
	#if [[ $temporada > -1 ]]; then
		#grep "temporada-$temporada" /tmp/paso1.2.txt > /tmp/paso1.3.txt
	#gawk -v var=$temporada -F '[/-]' '$5>=var{print}' /tmp/paso1.2.txt > /tmp/paso1.3.txt
	awk -v season=$temporada -v chapter=$capitulo -f "$FILTROAWK" /tmp/paso1.2.txt > /tmp/paso1.3.txt
	rm /tmp/paso1.2.txt
	mv /tmp/paso1.3.txt /tmp/paso1.2.txt
	#fi
	#No tiene sentido aquí filtrar por capítulo porque nos daría todos los números de capítulo que
	#coincidieran con el proporcionado. Eso en todo caso debería hacerse en el bucle del programa principal
	# if [[ $capitulo > -1 ]]; then
	# 	gawk -F '[/-]' '$3>$capitulo{print}' /tmp/paso1.2.txt > /tmp/paso1.3.txt
	# 	rm /tmp/paso1.2.txt
	#  	mv /tmp/paso1.3.txt /tmp/paso1.2.txt	
	# fi
	cat /tmp/paso1.2.txt
}

function loadChapterLinks() {
	local url=$1

	curl "https://seriesblanco.com/$url" | tr -d '\n' > /tmp/paso2.txt 2> /tmp/paso2.dbg

	grep -Po '<a href="/enlace.*?" target="_blank">' /tmp/paso2.txt
	#grep -Po 'href=".*?"' /tmp/paso2.2.txt | sed 's/\(href="\|"\)//g'
}

function loadChapterServices() {
	local url=$1

	curl "https://seriesblanco.com/$url" | tr -d '\n' > /tmp/paso2.txt 2> /tmp/paso2.1.dbg

	grep -Po "src='/servidores.*?' width='80'" /tmp/paso2.txt
}

function getLink() {
	local enlace=$1

	IFS='/' read -r -a array <<< "$enlace"

	id="${array[1]}"
	serie="${array[2]}"

	id=${id:6}


	#serie=$1
	#id=$2

	#echo "Serie: $serie Id: $id"

	curl "https://seriesblanco.com/ajax/load_enlace.php?serie=$serie&id=$id" > /tmp/paso3.txt 2> /tmp/paso2.2.dbg

	#Se debería comprobar si el resultado es vacío. 
	#La instrucción para saber la longitud del archivo es estaÇ:
	#FILESIZE=$(stat -c%s "$filename")

	grep -Po "window.location.href= '.*?'" /tmp/paso3.txt | sed "s/\(window.location.href= '\|'\)//g"
}

##################################################################################################
# Funciones base de datos: BEGIN
#-------------------------------------------------------------------------------------------------
# Todas ellas contendrán BD en su nombre
##################################################################################################

#Obtener el último ID generado (por una inserción en una tabla)
function getBDLastID () {
	local tabla="$1"
	local ID=`$SQLITE "select max(id) from $tabla"`
	echo "$ID"
}

#Comprobar si una serie ya existe
function existsBDSeries () {
	local enlace="$1"

	local res=`$SQLITE "select id from series where enlace = \"$enlace\""`
	if [[ $res = "" ]]; then
		echo "-1"
	else
		echo "$res"
	fi
}

#Comprobar si un episodio ya existe
function existsBDEpisodios () {
	local idserie="$1"
	local temporada="$2"
	local episodio="$3"

	local res=`$SQLITE "select id from episodios where idserie = $idserie and temporada = $temporada and episodio = $episodio"`
	if [[ $res = "" ]]; then
		echo "-1"
	else
		echo "$res"
	fi
}

#Comprobar si un episodio ya existe
function existsBDEnlaces () {
	local idserie="$1"
	local idepisodio="$2"
	local enlace="$3"

	local res=`$SQLITE "select id from enlaces where idserie = $idserie and idepisodio = $idepisodio and enlace=\"$enlace\""`
	if [[ $res = "" ]]; then
		echo "-1"
	else
		echo "$res"
	fi
}

function help {
	echo "$CODENAME $VERSION - Copyleft (GPL v3) Julio Serrano 2017"
	echo "Rellena la base de datos de qs con datos de la web de sb"
	echo
	echo "Modo de empleo: $CODENAME [opción] <cadena de búsqueda>"
	echo
	echo " Ejemplos:"
	echo "	$CODENAME discovery"
	echo
	echo "	$CODENAME -t 9 se ha escrito un crimen"
	echo
	echo "	$CODENAME -t 1 -c 7 el mentalista"
	echo
	echo "	$CODENAME -t 2 -c 2 -s streamcloud the orville"
	echo
	echo "Opciones"
	echo " -t"
	echo "      Filtrar por temporada."
	echo
	echo "Nota: Si filtramos por temporada recabará datos a partir de la temporada escogida."
	echo
	echo " -c"
	echo "      Filtrar por episodio."
	echo 
	echo "Nota: Filtrar por capítulo solo funcionará si también se introduce la temporada."
	echo "De esa manera se empezará a recabar datos a partir de la temporada y episodio elegidos."
	echo
}

##################################################################################################
# Funciones base de datos: END
##################################################################################################


#################################################################################################
# P R O G R A M A      P R I N C I P A L
#################################################################################################

TEMP=`getopt -o ht:c: --long "help,temporada:,capitulo:" -- "$@"`



if [ $? != 0 ]; then help; exit 1; fi

# Note the quotes around `$TEMP': they are essential!
eval set -- "$TEMP"


# Debug
#echo "$TEMP"

# VER_NO_VISTOS=false
# VER_VISTOS=false
# forth_number=0
# forth_all=false
# reset=false
# reset_by=false
#back=0
# reset_data=()
temporada=-1
capitulo=-1
# servicio=""
# limit=false
# vervistos=false
# gonext=false

while true; do
  case "$1" in
  	-h | --help ) help; exit ;;
	-t | --temporada ) temporada=$2; shift ;;
	-c | --capitulo ) capitulo=$2; shift ;;
	# -s | --servicio ) servicio=$2; shift ;;
	# -l | --limit ) limit=true ;;
	# -v ) vervistos=true ;;
	# -n | --next ) gonext=true ;;
	# -b | --back ) let back++ ;;
	# -f | --forth ) let forth_number++ ;;
	# --forth-by ) forth_number=$2; shift ;;
	# -a | --forth-all ) forth_all=true ;;
	# --back-by ) back=$2; shift ;;
 #    # -v ) VER_VISTOS=true ;;
	# -r | --reset ) reset=true ;;
	# # -m | --mreset ) reset_data+=("$2"); shift ;;
	# # --reset-by ) reset_by=true; bydata=$2; shift ;;
    * ) break ;;
  esac
  shift
done

if [[ $1 = "--" ]]; then
	shift
fi


echo "Argumentos: $1 $2 $3 $4 $5 $6 $7 $8 $9"


echo "$CODENAME $VERSION - Copyleft (GPL v3) Julio Serrano 2017"
echo "Webscrapper para llenar la base de datos de sbdb"
echo

#Recuperar los resultados de la búsqueda
SERIES=$(searchSeries $1 $2 $3 $4 $5 $6 $7 $8 $9)

if [[ $SERIES = "" ]]; then
	echo "No se ha encontrado ninguna serie"
	exit
fi

#Dividir series por nueva línea
readarray -t aseries <<<"$SERIES"

#Recorrer el array resultante "y"
let i=0
for t in "${aseries[@]}"; do
	echo "$i: $t"
	((i++))
done

LIMITE=$(( ${#aseries[*]} - 1 ))
CHOSENID=$(userChoice $LIMITE)

#echo "El elegido es: ${aseries[$CHOSENID]}"
echo

#Extraer el nombre de la serie para futuros usos
SERIE=$(getSerie "${aseries[$CHOSENID]}")

SERIE_ID=$(existsBDSeries "$SERIE")
if [[ $SERIE_ID == -1 ]]; then
	echo "La serie no existe. Nos disponemos a insertarla"

	echo "Introduzca el título de esta serie"
	read titulo

	while [[ "$titulo" = "" ]]; do
		echo "El título no puede ser cadena vacía"
		echo "Introduzca el título de esta serie"
		read titulo	
	done

	`$SQLITE "insert into series (titulo, enlace) values (\"$titulo\",\"$SERIE\");"`
	SERIE_ID=$(getBDLastID "series")	
	echo "Se añadió la serie con el id: $SERIE_ID"
else
	echo "La serie existe y tiene el id: $SERIE_ID"
fi

if [[ $temporada > -1 ]]; then
	echo "Recabando datos desde la temporada $temporada"
else
	echo "Recabando datos de todas las temporadas"
fi

#AHora le toca al turno a los capítulos de la serie
CHAPTERS=$(loadChapters ${aseries[$CHOSENID]} $SERIE)

if [[ $CHAPTERS = "" ]]; then
	echo "No se ha encontrado ningún episodio para esta serie"
	exit
fi

#Dividir series por nueva línea
readarray -t achapters <<<"$CHAPTERS"

#Recorrer el array resultante "y"
let i=0
for e in "${achapters[@]}"; do
	myTemporada=$(parseTemporada "$e")
	myCapitulo=$(parseCapitulo "$e")

	echo "****Temporada: $myTemporada, Capítulo: $myCapitulo"

	CAPITULO_ID=$(existsBDEpisodios "$SERIE_ID" "$myTemporada" "$myCapitulo")

	if [[ $CAPITULO_ID == -1 ]]; then
		`$SQLITE "insert into episodios (idserie, temporada, episodio, visto) values ($SERIE_ID, $myTemporada, $myCapitulo, 0)"`
		CAPITULO_ID=$(getBDLastID "episodios")

		echo "Se añadió el episodio con el id: $CAPITULO_ID"
	else
		echo "El episodio ya existe con el id: $CAPITULO_ID"
	fi

	CHAPTERLINKS=$(loadChapterLinks "$e")
	CHAPTERSERVICES=$(loadChapterServices "$e")

	#Nos preparamos para recorrer los enlaces

	if [[ $CHAPTERLINKS = "" ]]; then
		echo "No se han encontrado enlaces para el episodio seleccionado"
		continue
	fi

	if [[ $CHAPTERSERVICES = "" ]]; then
		echo "No se han encontrado enlaces para el episodio seleccionado"
		continue
	fi
	#Dividir series por nueva línea
	readarray -t alinks <<<"$CHAPTERLINKS"
	readarray -t aservices <<<"$CHAPTERSERVICES"

	if [[ "${#alinks[*]}" != "${#aservices[*]}" ]]; then
		echo "El número de enlaces no se corresponde con el número de servicios"
		echo "y contiene ${#alinks[*]} mientras que x contiene ${#aservices[*]}"
		continue
	fi

	#Recorrer el array resultante "y"
	let j=0
	for t in "${alinks[@]}"; do
		mylink=$(parseLink "$t")
		myservice=$(parseService "${aservices[j]}")
		if [[ ${myservice,,} == ${servicio,,}* ]]; then
			echo "$j: $mylink / $myservice"

			# Recuperamos el enlace final

			LINK=$(getLink $(parseLink "${alinks[j]}"))

			if [[ $LINK = "" ]]; then
				echo "Fallo al obtener el enlace"
				continue
			fi

			echo "El enlace es: $LINK"

			LINK_ID=$(existsBDEnlaces "$SERIE_ID" "$CAPITULO_ID" "$LINK")
			if [[ $LINK_ID == "-1" ]]; then
				`$SQLITE "insert into enlaces (idserie, idepisodio, enlace, url) values ($SERIE_ID, $CAPITULO_ID, \"$LINK\", \"$myservice\")"`
				LINK_ID=$(getBDLastID "enlaces")
				echo ">>>Enlace: $LINK_ID - Temporada: $myTemporada - Capítulo: $myCapitulo"
			else
				echo "Enlace: $LINK_ID - Temporada: $myTemporada - Capítulo: $myCapitulo"
			fi

		fi
		((j++))
	done	

	((i++))
done